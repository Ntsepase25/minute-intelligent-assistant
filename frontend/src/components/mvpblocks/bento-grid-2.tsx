"use client";

import * as React from "react";
import { cn } from "@/lib/utils";
import {
  Home,
  MapPin,
  Compass,
  Building,
  Heart,
  HomeIcon,
  Camera,
  Pin,
} from "lucide-react";
import {
  Card,
  CardHeader,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { useSelectedRecordingStore } from "@/stores/recordingsStore";

interface BentoItem {
  title: string;
  description: string;
  icon: React.ReactNode;
  status?: string;
  tags?: string[];
  meta?: string;
  cta?: string;
  colSpan?: number;
  hasPersistentHover?: boolean;
}

interface BentoGridProps {
  items?: BentoItem[];
}

const itemsSample: BentoItem[] = [
  {
    title: "Summary",
    meta: "Generated by AI",
    description:
      "Explore our extensive collection of ready-to-use UI components built with Next.js and Tailwind CSS. Perfect for quickly building beautiful, responsive websites.",
    icon: <Home className="text-primary h-4 w-4" />,
    status: "Popular",
    tags: ["UI", "Components", "Tailwind"],
    colSpan: 2,
    hasPersistentHover: true,
  },
  {
    title: "Action Items",
    meta: "Next Steps",
    description: "No action items.",
    icon: <Building className="text-primary h-4 w-4" />,
    status: "Essential",
    tags: ["Mobile", "Desktop"],
  },
  {
    title: "Participants",
    meta: "Participants List",
    description: "Participant list not available yet.",
    icon: <Compass className="text-primary h-4 w-4" />,
    status: "Featured",
    tags: ["DX", "TypeScript"],
  },
  {
    title: "Transcript",
    meta: "Generated by AI",
    description:
      "MVPBlocks is completely free and open-source. Use it for personal and commercial projects without any restrictions or attribution requirements.",
    icon: <Camera className="text-primary h-4 w-4" />,
    status: "Free",
    tags: ["Open Source", "MIT"],
    colSpan: 2,
  },
];

export default function BentoGrid({ items = itemsSample }: BentoGridProps) {
  const selectedRecording = useSelectedRecordingStore(
    (state) => state.selectedRecording
  );

  if (selectedRecording && selectedRecording.summary) {
    itemsSample[0].description = selectedRecording.summary;
    itemsSample[3].description = selectedRecording.transcript || "Transcript not available yet.";
  }
  
  return (
    <section className="relative overflow-hidden pb-12 pt-2">
      <div className="w-full text-xl font-bold flex items-center gap-2">
        <Pin className="h-4 w-4 text-primary" />
        Notes & Key Points
      </div>
      {/* Decorative elements */}
      <div className="bg-primary/5 absolute top-20 -left-20 h-64 w-64 rounded-full blur-3xl" />
      <div className="bg-primary/5 absolute -right-20 bottom-20 h-64 w-64 rounded-full blur-3xl" />

      <div className="relative mx-auto grid max-w-6xl grid-cols-1 gap-4 p-4 md:grid-cols-3">
        {items.map((item, index) => (
          <div
            key={`${item.title}-${item.status || item.meta}`}
            className={cn(
              "min-h-60",
              item.colSpan || "col-span-1",
              item.colSpan === 2 ? "md:col-span-2" : ""
            )}
          >
            <Card
              className={cn(
                "group bg-card/40 relative h-full transition-all duration-300 hover:shadow-md",
                "will-change-transform hover:-translate-y-1",
                "border-border/60 overflow-hidden",
                {
                  "-translate-y-1 shadow-md": item.hasPersistentHover,
                }
              )}
            >
              <div
                className={cn(
                  "absolute inset-0",
                  item.hasPersistentHover
                    ? "opacity-100"
                    : "opacity-0 group-hover:opacity-100",
                  "transition-opacity duration-300"
                )}
              >
                <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(0,0,0,0.03)_1px,transparent_1px)] bg-[length:4px_4px] dark:bg-[radial-gradient(circle_at_center,rgba(255,255,255,0.03)_1px,transparent_1px)]" />
              </div>

              <CardContent className="relative space-y-2 p-4 pt-0">
                <h3 className="text-foreground text-[15px] font-medium tracking-tight">
                  {item.title}
                  {item.meta && (
                    <span className="text-muted-foreground ml-2 text-xs font-normal">
                      {item.meta}
                    </span>
                  )}
                </h3>
                <p className="text-muted-foreground text-sm leading-relaxed">
                  {item.description}
                </p>
              </CardContent>

              <div
                className={cn(
                  "via-primary/10 absolute inset-0 -z-10 rounded-xl bg-gradient-to-br from-transparent to-transparent p-px",
                  item.hasPersistentHover
                    ? "opacity-100"
                    : "opacity-0 group-hover:opacity-100",
                  "transition-opacity duration-300"
                )}
              />
            </Card>
          </div>
        ))}
      </div>
    </section>
  );
}
