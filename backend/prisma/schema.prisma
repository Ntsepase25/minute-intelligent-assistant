// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  name          String
  emailVerified Boolean     @default(false)
  image         String?
  sessions      Session[]
  accounts      Account[]
  recordings    Recording[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Recording {
  id                  String   @id @default(uuid())
  meetingId           String?
  userId              String
  meetingPlatform     String?
  recordingUrl        String?
  transcript          String?
  summary             String?
  title               String?
  minutes             String?
  actionItems         Json?
  nextMeeting         Json?
  summaryData         Json?    // Raw JSON from Gemini
  googleOperationName String?
  assemblyOperationId String?
  
  // Google Meet specific fields
  googleMeetConferenceId String?
  googleMeetSpace        String?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  participants      Participant[]
  transcriptEntries TranscriptEntry[]
}

model Participant {
  id             String    @id @default(uuid())
  recordingId    String
  recording      Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)
  
  // From Google Meet API
  googleParticipantId String  // Format: conferenceRecords/{conferenceRecord}/participants/{participant}
  googleUserId        String? // For signed-in users: users/{user}
  displayName         String?
  participantType     String  // "signedinUser", "anonymousUser", "phoneUser"
  earliestStartTime   DateTime?
  latestEndTime       DateTime?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("participants")
}

model TranscriptEntry {
  id          String    @id @default(uuid())
  recordingId String
  recording   Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)
  
  // From Google Meet transcript entries API
  googleEntryId      String   // Format: conferenceRecords/{conferenceRecord}/transcripts/{transcript}/entries/{entry}
  googleParticipantId String? // Links to participant who spoke
  text               String
  languageCode       String?
  startTime          DateTime
  endTime            DateTime
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("transcript_entries")
}
